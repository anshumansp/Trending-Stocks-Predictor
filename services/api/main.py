[INFO] Starting stock data collection task
[INFO] Successfully collected stock data for 500 stocks
[INFO] Starting sentiment analysis task
[INFO] Completed sentiment analysis for AAPL
[INFO] Starting stock evaluation task
[INFO] Updated recommendations for 500 stocks
from fastapi import FastAPI, Request, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.middleware.gzip import GZipMiddleware
from contextlib import asynccontextmanager
import time
import uvicorn
from routers import stock_analysis
from dependencies import get_redis_client, get_mongo_client, close_redis_client, close_mongo_client

@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    await get_redis_client()
    await get_mongo_client()
    yield
    # Shutdown
    await close_redis_client()
    await close_mongo_client()

app = FastAPI(
    title="Stock Analysis API",
    description="API for comprehensive stock analysis and recommendations",
    version="1.0.0",
    lifespan=lifespan
)

# Add CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Configure appropriately for production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Add Gzip compression
app.add_middleware(GZipMiddleware, minimum_size=1000)

# Include routers
app.include_router(stock_analysis.router)

# Middleware for request timing
@app.middleware("http")
async def add_process_time_header(request: Request, call_next):
    start_time = time.time()
    response = await call_next(request)
    process_time = time.time() - start_time
    response.headers["X-Process-Time"] = str(process_time)
    return response

# Error handlers
@app.exception_handler(HTTPException)
async def http_exception_handler(request: Request, exc: HTTPException):
    return JSONResponse(
        status_code=exc.status_code,
        content={"detail": exc.detail},
    )

@app.exception_handler(Exception)
async def general_exception_handler(request: Request, exc: Exception):
    return JSONResponse(
        status_code=500,
        content={"detail": "Internal server error"},
    )

# Health check endpoint
@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "timestamp": time.time()
    }

# API documentation endpoints are automatically generated by FastAPI

if __name__ == "__main__":
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        workers=4
    )
